openapi: "3.0.0"
info:
  title: "API"
  version: "1.0.0"
paths:
  /api/register:
    post:
      description: Register new user
      requestBody:
        description: User email and password
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/RegUser'
      responses:
        '201':
          description: Ok
          headers:
            Authorization:
              schema:
                $ref: '#/components/schemas/AuthorizationHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegUser'
  /api/login:
    post:
      description: Login existing user
      requestBody:
        description: User email and password
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Ok
          headers:
            Authorization:
              schema:
                $ref: '#/components/schemas/AuthorizationHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUser'
  /api/users/{id}:
    get:
      description: Get user info
      parameters:
        - in: path
          name: id
          description: User's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users:
    put:
      description: Fill user's info
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/AuthorizationHeader'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/UserInfo'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
  /api/users/{id}/image:
    post:
      description: Upload user's image
      parameters:
        - in: path
          name: id
          description: User's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
  /api/posts:
    post:
      description: Create new team
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/AuthorizationHeader'
          required: true
      requestBody:
        description: Title, subject and description of team
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    get:
      description: Get list of teams
      parameters:
        - in: query
          name: limit
          description: Posts' limit
          required: true
          schema:
            type: integer
        - in: query
          name: offset
          description: Posts' offset
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
  /api/posts/{id}:
    get:
      description: Get information about team
      parameters:
        - in: path
          name: id
          description: Team's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /api/posts/{id}/image:
    post:
      description: Upload image to team
      parameters:
        - in: path
          name: id
          description: Team's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
  /api/posts/{id}/members:
    post:
      description: Add self to member request
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/AuthorizationHeader'
          required: true
        - in: path
          name: id
          description: Team's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
    delete:
      description: Delete self from team
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/AuthorizationHeader'
          required: true
        - in: path
          name: id
          description: Team's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
  /api/posts/{postId}/member/{memberId}:
    put:
      description: Approve user with memberId to be a member of team with postId
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/AuthorizationHeader'
          required: true
        - in: path
          name: postId
          description: Team's id
          required: true
          schema:
            type: string
        - in: path
          name: memberId
          description: User's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
    delete:
      description: Delete user with memberId from team with postId by author
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/schemas/AuthorizationHeader'
          required: true
        - in: path
          name: postId
          description: Team's id
          required: true
          schema:
            type: string
        - in: path
          name: memberId
          description: User's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
  /api/image/{id}:
    get:
      description: Get image by id
      parameters:
        - in: path
          name: id
          description: Team's id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File
          content:
            image/png:
              schema:
                type: string
                format: binary

components:
  schemas:
    File:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    RegUser:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
          format: password
    LoginUser:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserBase:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
    User:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        info:
          $ref: '#/components/schemas/UserInfo'
    UserInfo:
      type: object
      properties:
        image:
          type: string
        city:
          type: string
        githubLink:
          type: string
        aboutMe:
          type: string
        authorPosts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        memberPosts:
          items:
            $ref: '#/components/schemas/Post'
    CreatePost:
      type: object
      properties:
        title:
          type: string
        subject:
          type: string
        description:
          type: string
    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        subject:
          type: string
        description:
          type: string
        author:
          $ref: '#/components/schemas/UserBase'
        membersRequest:
          type: array
          items:
            $ref: '#/components/schemas/UserBase'
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserBase'
        createdAt:
          type: string
          format: time
    Posts:
      type: array
      items:
        $ref: '#/components/schemas/Post'
    AuthorizationHeader:
      type: string
      pattern: '^Bearer .+$'

